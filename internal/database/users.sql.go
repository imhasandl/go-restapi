// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const changeUser = `-- name: ChangeUser :one
UPDATE users SET email = $1, updated_at = NOW(), password = $2
WHERE id = $3
RETURNING id, created_at, updated_at, email, username, password, is_premium
`

type ChangeUserParams struct {
	Email    string
	Password string
	ID       uuid.UUID
}

func (q *Queries) ChangeUser(ctx context.Context, arg ChangeUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, changeUser, arg.Email, arg.Password, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.IsPremium,
	)
	return i, err
}

const checkIfUsernameOrEmailTaken = `-- name: CheckIfUsernameOrEmailTaken :one
SELECT id from users
WHERE username = $1 or email = $2
`

type CheckIfUsernameOrEmailTakenParams struct {
	Username string
	Email    string
}

func (q *Queries) CheckIfUsernameOrEmailTaken(ctx context.Context, arg CheckIfUsernameOrEmailTakenParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, checkIfUsernameOrEmailTaken, arg.Username, arg.Email)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, username, password)
VALUES (
   $1,
   NOW(),
   NOW(),
   $2,
   $3,
   $4
)
RETURNING id, created_at, updated_at, email, username, password, is_premium
`

type CreateUserParams struct {
	ID       uuid.UUID
	Email    string
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.IsPremium,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, email, username, password, is_premium FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.IsPremium,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, email, username, password, is_premium FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.IsPremium,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, created_at, updated_at, email, username, password, is_premium FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.IsPremium,
	)
	return i, err
}

const listAllUsers = `-- name: ListAllUsers :many
SELECT id, created_at, updated_at, email, username, password, is_premium FROM users
`

func (q *Queries) ListAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.IsPremium,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upgradeToPremium = `-- name: UpgradeToPremium :one
UPDATE users SET is_premium = true, updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, email, username, password, is_premium
`

func (q *Queries) UpgradeToPremium(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, upgradeToPremium, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.IsPremium,
	)
	return i, err
}
