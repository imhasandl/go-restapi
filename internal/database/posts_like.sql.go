// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts_like.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const dislikePost = `-- name: DislikePost :exec
DELETE FROM posts_likes WHERE user_id = $1
`

func (q *Queries) DislikePost(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, dislikePost, userID)
	return err
}

const likePost = `-- name: LikePost :one
INSERT INTO posts_likes (id, post_id, user_id, created_at)
VALUES (
   $1,
   $2,
   $3,
   NOW()
)
RETURNING id, post_id, user_id, created_at
`

type LikePostParams struct {
	ID     uuid.UUID
	PostID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) LikePost(ctx context.Context, arg LikePostParams) (PostsLike, error) {
	row := q.db.QueryRowContext(ctx, likePost, arg.ID, arg.PostID, arg.UserID)
	var i PostsLike
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const listLikePost = `-- name: ListLikePost :many
SELECT id, post_id, user_id, created_at FROM posts_likes
`

func (q *Queries) ListLikePost(ctx context.Context) ([]PostsLike, error) {
	rows, err := q.db.QueryContext(ctx, listLikePost)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostsLike
	for rows.Next() {
		var i PostsLike
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
